#!/bin/bash
shopt -s nocasematch

trap "exit 130" SIGINT
trap "exit 137" SIGKILL
trap "exit 143" SIGTERM

generate_config () {
  source {{ sysconfig_dir }}/chnserver

  cd {{ server_dir }}

  if [[ ! -f ./config.py ]]
  then

    if [[ -z ${EMAIL} ]]
    then
      echo "Admin email is required"
      exit 1
    else
      EMAIL="--email ${EMAIL}"
    fi

    if [[ ! -z ${SERVER_BASE_URL} ]]
    then
      SERVER_BASE_URL="--base_url ${SERVER_BASE_URL}"
    else
      SERVER_BASE_URL=""
    fi

    if [[ ! -z "${HONEYMAP_URL}" ]]
    then
      HONEYMAP_URL="--honeymap_url ${HONEYMAP_URL}"
    else
      HONEYMAP_URL=""
    fi

    if [[ ! -z "${REDIS_URL}" ]]
    then
      REDIS_URL="--redis_url ${REDIS_URL}"
    else
      REDIS_URL=""
    fi

    if [[ -z ${MAIL_SERVER} ]]
    then
      echo "Mail server is required"
      exit 1
    else
      MAIL_SERVER="--mail_server ${MAIL_SERVER}"
    fi

    if [[ -z ${MAIL_PORT} ]]
    then
      echo "Mail port is required"
      exit 1
    else
      MAIL_PORT="--mail_port ${MAIL_PORT}"
    fi

    if [[ "${MAIL_TLS}" == "y" ]]
    then
      MAIL_TLS="--mail_tls"
    else
      MAIL_TLS=""
    fi

    if [[ "${MAIL_SSL}" == "y" ]]
    then
      MAIL_SSL="--mail_ssl"
    else
      MAIL_SSL=""
    fi

    if [[ ! -z "${MAIL_USER}" ]]
    then
      MAIL_USER="--mail_user ${MAIL_USER}"
    else
      MAIL_USER=""
    fi

    if [[ ! -z "${MAIL_PASSWORD}" ]]
    then
      MAIL_PASSWORD="--mail_pass ${MAIL_PASSWORD}"
    else
      MAIL_PASSWORD=""
    fi

    if [[ ! -z "${DEFAULT_MAIL_SENDER}" ]]
    then
      DEFAULT_MAIL_SENDER="--mail_sender ${DEFAULT_MAIL_SENDER}"
    else
      DEFAULT_MAIL_SENDER=""
    fi

    if [[ ! -z "${LOG_FILE_PATH}" ]]
    then
      LOG_FILE_PATH="--log_file_path ${LOG_FILE_PATH}"
    else
      LOG_FILE_PATH=""
    fi

    if [[ "${DEBUG}" == "y" || "${DEBUG}" == "true" ]]
    then
      DEBUG="--debug"
    else
      DEBUG=""
    fi

    if [[ ! -z "${MONGODB_HOST}" ]]
    then
      MONGODB_HOST="--mongo_host ${MONGODB_HOST}"
    else
      MONGODB_HOST=""
    fi

    if [[ -z ${MONGODB_PORT} ]]
    then
      echo "MongoDB port is required"
      exit 1
    else
      MONGODB_PORT="--mongo_port ${MONGODB_PORT}"
    fi

    if [[ ! -z "${HPFEEDS_HOST}" ]]
    then
      HPFEEDS_HOST="--hpfeeds_host ${HPFEEDS_HOST}"
    else
      HPFEEDS_HOST=""
    fi

    if [[ -z ${HPFEEDS_PORT} ]]
    then
      echo "HPFeeds port is required"
      exit 1
    else
      HPFEEDS_PORT="--hpfeeds_port ${HPFEEDS_PORT}"
    fi

    if [[ ! -z ${SUPERUSER_EMAIL} ]]
    then
        SUPERUSER_EMAIL="--email ${SUPERUSER_EMAIL}"
    else
        SUPERUSER_EMAIL=""
    fi

    if [[ ! -z ${SUPERUSER_PASSWORD} ]]
    then
        SUPERUSER_PASSWORD="--password ${SUPERUSER_PASSWORD}"
    else
        SUPERUSER_PASSWORD=""
    fi

    if [[ ! -z ${SECRET_KEY} ]]
    then
        SECRET_KEY="--secret_key ${SECRET_KEY}"
    else
        SECRET_KEY=""
    fi

    if [[ ! -z ${DEPLOY_KEY} ]]
    then
        DEPLOY_KEY="--deploy_key ${DEPLOY_KEY}"
    else
        DEPLOY_KEY=""
    fi

    if [[ "${LDAP_AUTH_ENABLED}" == "y" ]]
    then
      LDAP_AUTH_ENABLED="--ldap_auth"
    else
      LDAP_AUTH_ENABLED=""
    fi

    if [[ ! -z ${LDAP_HOST} ]]
    then
        LDAP_HOST="--ldap_host ${LDAP_HOST}"
    else
        LDAP_HOST=""
    fi

    if [[ ! -z ${LDAP_PORT} ]]
    then
        LDAP_PORT="--ldap_port ${LDAP_PORT}"
    else
        LDAP_PORT=""
    fi

    if [[ "${LDAP_USE_SSL}" == "y" ]]
    then
      LDAP_USE_SSL="--ldap_ssl"
    else
      LDAP_USE_SSL=""
    fi

    if [[ ! -z "${LDAP_SSL_VALIDATE}" ]]
    then
      LDAP_SSL_VALIDATE="--ldap_ssl_validate ${LDAP_SSL_VALIDATE}"
    else
      LDAP_SSL_VALIDATE=""
    fi

    if [[ ! -z "${LDAP_SSL_CERT_FILE}" ]]
    then
      LDAP_SSL_CERT_FILE="--ldap_ssl_cert_file ${LDAP_SSL_CERT_FILE}"
    else
      LDAP_SSL_CERT_FILE=""
    fi

    if [[ ! -z "${LDAP_SSL_PROTOCOL_VERSION}" ]]
    then
      LDAP_SSL_PROTOCOL_VERSION="--ldap_ssl_protocol_version ${LDAP_SSL_PROTOCOL_VERSION}"
    else
      LDAP_SSL_PROTOCOL_VERSION=""
    fi

    if [[ ! -z "${LDAP_ADD_SERVER}" ]]
    then
      LDAP_ADD_SERVER="--ldap_add_server ${LDAP_ADD_SERVER}"
    else
      LDAP_ADD_SERVER=""
    fi

    if [[ ! -z ${LDAP_BIND_USER_DN} ]]
    then
        LDAP_BIND_USER_DN="--ldap_bind_user ${LDAP_BIND_USER_DN}"
    else
        LDAP_BIND_USER_DN=""
    fi

    if [[ ! -z ${LDAP_BIND_USER_PASSWORD} ]]
    then
        LDAP_BIND_USER_PASSWORD="--ldap_bind_password ${LDAP_BIND_USER_PASSWORD}"
    else
        LDAP_BIND_USER_PASSWORD=""
    fi

    if [[ ! -z ${LDAP_BASE_DN} ]]
    then
	LDAP_BASE_DN="--ldap_base_dn ${LDAP_BASE_DN}"
    else
	LDAP_BASE_DN=""
    fi

    if [[ ! -z ${LDAP_USER_DN} ]]
    then
        LDAP_USER_DN="--ldap_user_dn ${LDAP_USER_DN}"
    else
        LDAP_USER_DN=""
    fi

    if [[ ! -z ${LDAP_USER_SEARCH_SCOPE} ]]
    then
        LDAP_USER_SEARCH_SCOPE="--ldap_user_search_scope ${LDAP_USER_SEARCH_SCOPE}"
    else
        LDAP_USER_SEARCH_SCOPE=""
    fi

    if [[ ! -z ${LDAP_USER_OBJECT_CLASS} ]]
    then
        LDAP_USER_OBJECT_CLASS="--ldap_user_class ${LDAP_USER_OBJECT_CLASS}"
    else
        LDAP_USER_OBJECT_CLASS=""
    fi

    if [[ ! -z ${LDAP_USER_LOGIN_ATTR} ]]
    then
        LDAP_USER_LOGIN_ATTR="--ldap_user_login_attribute ${LDAP_USER_LOGIN_ATTR}"
    else
        LDAP_USER_LOGIN_ATTR=""
    fi

    if [[ ! -z ${LDAP_USER_RDN_ATTR} ]]
    then
        LDAP_USER_RDN_ATTR="--ldap_user_rdn_attribute ${LDAP_USER_RDN_ATTR}"
    else
        LDAP_USER_RDN_ATTR=""
    fi

    if [[ ! -z ${LDAP_GROUP_DN} ]]
    then
        LDAP_GROUP_DN="--ldap_group_dn ${LDAP_GROUP_DN}"
    else
        LDAP_GROUP_DN=""
    fi

    if [[ ! -z ${LDAP_GROUP_SEARCH_SCOPE} ]]
    then
        LDAP_GROUP_SEARCH_SCOPE="--ldap_group_search_scope ${LDAP_GROUP_SEARCH_SCOPE}"
    else
        LDAP_GROUP_SEARCH_SCOPE=""
    fi

    if [[ ! -z ${LDAP_GROUP_MEMBERS_ATTR} ]]
    then
        LDAP_GROUP_MEMBERS_ATTR="--ldap_group_attribute ${LDAP_GROUP_MEMBERS_ATTR}"
    else
        LDAP_GROUP_MEMBERS_ATTR=""
    fi

    if [[ ! -z ${LDAP_GROUP_OBJECT_CLASS} ]]
    then
        LDAP_GROUP_OBJECT_CLASS="--ldap_group_class ${LDAP_GROUP_OBJECT_CLASS}"
    else
        LDAP_GROUP_OBJECT_CLASS=""
    fi

    if [[ ! -z ${LDAP_GROUP_TO_ROLE_ADMIN} ]]
    then
        LDAP_GROUP_TO_ROLE_ADMIN="--ldap_group_admins ${LDAP_GROUP_TO_ROLE_ADMIN}"
    else
        LDAP_GROUP_TO_ROLE_ADMIN=""
    fi

    if [[ ! -z ${LDAP_GROUP_TO_ROLE_USER} ]]
    then
        LDAP_GROUP_TO_ROLE_USER="--ldap_group_users ${LDAP_GROUP_TO_ROLE_USER}"
    else
        LDAP_GROUP_TO_ROLE_USER=""
    fi

    python generateconfig.py unattended	${EMAIL} \
                                        ${SERVER_BASE_URL} \
                                        ${HONEYMAP_URL} \
                                        ${REDIS_URL} \
                                        ${MAIL_SERVER} \
                                        ${MAIL_PORT} \
                                        ${MAIL_SSL} \
                                        ${MAIL_TLS} \
                                        ${MAIL_USER} \
                                        ${MAIL_PASSWORD} \
                                        ${DEFAULT_MAIL_SENDER} \
                                        ${LOG_FILE_PATH} \
					${DEBUG} \
                                        ${MONGODB_HOST} \
                                        ${MONGODB_PORT} \
                                        ${HPFEEDS_HOST} \
                                        ${HPFEEDS_PORT} \
                                        ${SUPERUSER_EMAIL} \
                                        ${SUPERUSER_PASSWORD} \
                                        ${SECRET_KEY} \
                                        ${DEPLOY_KEY} \
					${LDAP_AUTH_ENABLED} \
					${LDAP_HOST} \
					${LDAP_PORT} \
					${LDAP_USE_SSL} \
					${LDAP_SSL_VALIDATE} \
					${LDAP_SSL_CERT_FILE} \
					${LDAP_SSL_PROTOCOL_VERSION} \
					${LDAP_ADD_SERVER} \
					${LDAP_BIND_USER_DN} \
					${LDAP_BIND_USER_PASSWORD} \
					${LDAP_BASE_DN} \
					${LDAP_USER_DN} \
					${LDAP_USER_SEARCH_SCOPE} \
					${LDAP_USER_OBJECT_CLASS} \
					${LDAP_USER_LOGIN_ATTR} \
					${LDAP_USER_RDN_ATTR} \
					${LDAP_GROUP_DN} \
					${LDAP_GROUP_SEARCH_SCOPE} \
					${LDAP_GROUP_MEMBERS_ATTR} \
					${LDAP_GROUP_OBJECT_CLASS} \
					${LDAP_GROUP_TO_ROLE_ADMIN} \
					${LDAP_GROUP_TO_ROLE_USER}
	
    # Generate config file for hpfeeds broker
    cd {{ hpfeeds_dir }}/hpfeeds/broker
    python generateconfig.py unattended ${MONGODB_HOST} ${MONGODB_PORT}
  fi

  cd {{ server_dir }}
  if [[ "${1}" == "--no-db-init" ]]
  then
    echo 'null'
    return
  else
    python initdatabase.py
    echo $!
    return $?
  fi
}

make_logdir () {

  cd {{ server_dir }}

  local log_file_path=$(awk '/LOG_FILE_PATH/ {print $3}' /opt/config.py |sed "s/'//g")
  local logdir=$(awk -F/ 'BEGIN{FS=OFS="/"}{NF--; print}' <<< ${log_file_path})

  mkdir -p ${logdir}
  touch ${log_file_path}

  chown -R {{ nginx_user}}.root ${log_file_path}
}

generate_nginx_config () {
  cd /opt
  export server_base_url=$(awk '/SERVER_BASE_URL/ {print $3}' /opt/config.py | sed "s/'//g")
  python generate_nginx_standalone.py --server-base-url ${server_base_url} --output-file-nginx /etc/nginx/sites-available/default -f
}

manage_db_version () {
  # init migrations dir
  python manage.py db init --directory /opt/sqlite/migrations
  # auto-generate revision script
  python manage.py db migrate --directory /opt/sqlite/migrations
  # upgrade db if necessary
  python manage.py db upgrade --directory /opt/sqlite/migrations
}

main () {
  generate_config
  manage_db_version
  make_logdir
  generate_nginx_config
  
  local custom_url_path=$(python -c "from urlparse import urlparse; import os; result=urlparse(os.environ['server_base_url']); print(result.path.rstrip('/'))")
    
  cd {{ server_dir }}

  # Start a background rule refresh here, rather than in initdatabase.py
  # if custom_url_path isn't null, there's a custom path in SERVER_BASE_URL, so use it as a mount point
  # otherwise, mount at default root route as normal 
  if [[ -z ${custom_url_path} ]]
    then
        custom_url_path="/"
  fi
  
  python manage.py fetch_rules &

  exec uwsgi --socket /tmp/uwsgi.sock \
             --module mhn:mhn \
             --chmod-socket=666 \
             --buffer-size 04960 \
             --manage-script-name --mount ${custom_url_path}=mhn:mhn
}

main "${@}"
